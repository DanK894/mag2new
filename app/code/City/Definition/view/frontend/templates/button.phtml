<?php
/** @var $block Template */

use Magento\Framework\View\Element\Template;

$viewModel = $block->getViewModel();
$buttonTitle = __('Location');
$city = $viewModel->showCity();
$citys = $viewModel->getCityNameArray();
$jsonCitiesList = json_encode($citys, JSON_HEX_APOS);

?>
<?php if ($viewModel->moduleEnable()) : ?>
    <div>
        <button title="<?= $block->escapeHtmlAttr($buttonTitle) ?>"
                type="submit" id="modal-btn-custom-city"
                data-mage-init='{"city-definition" : {}}'><span><?= $block->escapeHtmlAttr($buttonTitle) ?></span>
        </button>
        <div class="custom-section" data-bind="scope: 'section'">
            <p data-bind="text: customsection().customdata"></p>
        </div>
        <script type="text/x-magento-init">
    {
    	"*": {
        	"Magento_Ui/js/core/app": {
            	"components": {
                	"section": {
                    	"component": "City_Definition/js/section"
                	}
            	}
        	}
    	}
    }
        </script>



    </div>
    <div id="modal-content-city">
        <div class="modal-inner-content">
            <form class="form contact" id="city123" method="post"
                  data-hasrequired="<?= $block->escapeHtmlAttr(__('* Required Fields')) ?>"
                  data-mage-init='{"validation":{}}'>
                <div class="field city required">
                    <div class="control">
                        <input name="city" id="city" title=""
                               value="" class="input-text" type="tel"
                               data-validate="{required:true, 'validate-city':true}"/>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div id="modal-custom-city">
        <div class="modal-inner-content">
            <div class="field note no-label" id="cityModal">
                <?= $city ?>
            </div>
        </div>
    </div>

<script>
    require(['jquery', 'jquery/ui', 'mage/url'], function ($) {
        function autocomplete(inp, arr) {
            var currentFocus;
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) {
                    return false;
                }
                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
                for (i = 0; i < arr.length; i++) {
                    if (arr[i][1]) {
                        if (arr[i][1].substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                            b = document.createElement("DIV");
                            b.innerHTML = "<strong>" + arr[i][1].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i][1].substr(val.length);
                            b.innerHTML += "<input type='hidden' data-name='"
                                + arr[i][1] + "' value='" + arr[i][0] + "'>";
                            a.appendChild(b);
                        }
                    }
                }
                a.addEventListener("click", function (e) {
                    inp.value = e.target.getElementsByTagName("input")[0].getAttribute('data-name');
                    inp.name = e.target.getElementsByTagName("input")[0].value;
                    closeAllLists();

                });
            });
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode === 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode === 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode === 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }

            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt !== x[i] && elmnt !== inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }

            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        var citiesObj = JSON.parse('<?= $jsonCitiesList; ?>');
        var cities = Object.entries(citiesObj);
        autocomplete(document.getElementById("city"), cities);
    });
</script>
<?php endif; ?>
